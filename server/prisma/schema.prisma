// =======================================
// GENERATOR & DATASOURCE
// =======================================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =======================================    
// ENUMS
// =======================================
enum RoomVisibility {
  PUBLIC
  PRIVATE
  INVITE_ONLY
}

enum ParticipantRole {
  ADMIN
  MEMBER
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  FILE
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

// =======================================
// MODELS
// =======================================

model User {
  id           String    @id @default(cuid())
  name         String
  email        String    @unique
  password     String
  profileImage String?
  bio          String?
  isVerified   Boolean   @default(false)
  isOnline     Boolean   @default(false)
  lastSeen     DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // --- Relationships ---
  refreshTokens      RefreshToken[]
  ownedRooms         Room[]             @relation("RoomOwner")
  roomsMember        RoomMember[]
  roomMessages       RoomMessage[]
  messageReactions   MessageReaction[]
  messageReads       MessageRead[]
  messageMentions    MessageMention[]
  notifications      Notification[]
  
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  isRevoked Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Room {
  id          String         @id @default(cuid())
  name        String
  description String?
  roomImage   String?
  roomCode    String?        @unique
  roomType    RoomVisibility @default(PUBLIC)
  isDeleted   Boolean        @default(false)
  createdAt   DateTime       @default(now())

  ownerId String
  owner   User @relation("RoomOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  // --- Relationships ---
  roomMembers RoomMember[]
  messages    RoomMessage[]
}

model RoomMember {
  id       String          @id @default(cuid())
  userId   String
  roomId   String
  role     ParticipantRole @default(MEMBER)
  joinedAt DateTime        @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
}

model RoomMessage {
  id        String      @id @default(cuid())
  content   String
  type      MessageType   @default(TEXT)
  status    MessageStatus @default(SENT)
  isEdited  Boolean     @default(false)
  isDeleted Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // --- Relations ---
  roomId   String
  room     Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  senderId String
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  messageReactions MessageReaction[]
  attachments      FileAttachment[]
  readBy           MessageRead[]
  mentions         MessageMention[]

  parentMessageId String?
  parentMessage   RoomMessage? @relation("MessageReplies", fields: [parentMessageId], references: [id], onDelete: Cascade)
  replies         RoomMessage[] @relation("MessageReplies")
}



model MessageReaction {
  id            String      @id @default(cuid())
  emoji         String
  createdAt     DateTime    @default(now())

  roomMessageId String
  roomMessage   RoomMessage @relation(fields: [roomMessageId], references: [id], onDelete: Cascade)

  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomMessageId, userId])
}

model FileAttachment {
  id        String   @id @default(cuid())
  fileUrl   String
  fileType  String
  createdAt DateTime @default(now())

  roomMessageId String
  roomMessage   RoomMessage @relation(fields: [roomMessageId], references: [id], onDelete: Cascade)
}

model MessageRead {
  id        String   @id @default(cuid())
  readAt    DateTime @default(now())

  roomMessageId String
  roomMessage   RoomMessage @relation(fields: [roomMessageId], references: [id], onDelete: Cascade)

  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomMessageId, userId])
}

model MessageMention {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  roomMessageId String
  roomMessage   RoomMessage @relation(fields: [roomMessageId], references: [id], onDelete: Cascade)

  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}
