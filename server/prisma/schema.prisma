// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(cuid())
  name               String
  email              String             @unique
  password           String
  profileImage       String?
  bio                String?
  isVerified         Boolean            @default(false)
  otp                String?
  otpExpiresAt       DateTime?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  isOnline           Boolean            @default(false)
  lastSeen           DateTime?
  room               Room[]
  refreshTokens      RefreshToken[]
  roomsMember        RoomMember[]
  roomMessages       RoomMessage[]
  roomMessageReplies RoomMessageReply[]
  messageReactions   MessageReaction[]

  notifications Notification[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  isRevoked Boolean  @default(false)
}

enum RoomVisibility {
  PUBLIC
  PRIVATE
  INVITE_ONLY
}

model Room {
  id             String         @id @default(cuid())
  name           String
  roomImage      String?
  description    String?
  createdBy      User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt      DateTime       @default(now())
  roomCode       String         @unique
  hashedPassword String?
  isPrivate      RoomVisibility @default(PUBLIC)
  ownerId        String
  isDeleted      Boolean        @default(false)
  roomMembers    RoomMember[]
  messages       RoomMessage[]
}

enum ParticipantRole {
  ADMIN
  MEMBER
}

model RoomMember {
  id       String          @id @default(cuid())
  userId   String
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  roomId   String
  room     Room            @relation(fields: [roomId], references: [id], onDelete: Cascade)
  role     ParticipantRole
  joinedAt DateTime        @default(now())
}

model RoomMessage {
  id        String   @id @default(cuid())
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    String
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isEdited         Boolean            @default(false)
  isDeleted        Boolean            @default(false)
  messageReactions MessageReaction[]
  attachments      FileAttachment[]
  replies          RoomMessageReply[]
}

model MessageReaction {
  id            String      @id @default(cuid())
  roomMessageId String
  roomMessage   RoomMessage @relation(fields: [roomMessageId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  emoji         String // e.g. "like", "love", etc.
  createdAt     DateTime    @default(now())

  @@unique([roomMessageId, userId])
}

model FileAttachment {
  id            String      @id @default(cuid())
  roomMessage   RoomMessage @relation(fields: [roomMessageId], references: [id], onDelete: Cascade)
  roomMessageId String
  fileUrl       String
  fileType      String // e.g. "image", "video", "document", etc.
  createdAt     DateTime    @default(now())
}

model RoomMessageReply {
  id            String      @id @default(cuid())
  roomMessage   RoomMessage @relation(fields: [roomMessageId], references: [id], onDelete: Cascade)
  roomMessageId String
  sender        User        @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId      String
  content       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String // e.g. "message", "mention", etc.
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}
