generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  name         String
  email        String    @unique
  password     String
  profileImage String?
  bio          String?
  isVerified   Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isOnline     Boolean   @default(false)
  lastSeen     DateTime?

  // --- Relationships ---
  refreshTokens      RefreshToken[]
  ownedRooms         Room[]             @relation("RoomOwner")
  roomsMember        RoomMember[]
  roomMessages       RoomMessage[]
  roomMessageReplies RoomMessageReply[]
  messageReactions   MessageReaction[]
  notifications      Notification[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Added onDelete
  isRevoked Boolean  @default(false)
}

enum RoomVisibility {
  PUBLIC
  PRIVATE
  INVITE_ONLY
}

model Room {
  id          String         @id @default(cuid())
  name        String
  roomImage   String?
  description String?
  ownerId     String
  owner       User           @relation("RoomOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt   DateTime       @default(now())
  roomCode    String?        @unique
  isPrivate   RoomVisibility @default(PUBLIC)
  isDeleted   Boolean        @default(false)

  roomMembers RoomMember[]
  messages    RoomMessage[]
}

enum ParticipantRole {
  ADMIN
  MEMBER
}

model RoomMember {
  id       String          @id @default(cuid())
  userId   String
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  roomId   String
  room     Room            @relation(fields: [roomId], references: [id], onDelete: Cascade)
  role     ParticipantRole @default(MEMBER)
  joinedAt DateTime        @default(now())

  @@unique([userId, roomId])
}

model RoomMessage {
  id               String             @id @default(cuid())
  roomId           String
  room             Room               @relation(fields: [roomId], references: [id], onDelete: Cascade)
  senderId         String
  sender           User               @relation(fields: [senderId], references: [id], onDelete: Cascade)
  content          String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  isEdited         Boolean            @default(false)
  isDeleted        Boolean            @default(false)
  messageReactions MessageReaction[]
  attachments      FileAttachment[]
  replies          RoomMessageReply[]
}

model MessageReaction {
  id            String      @id @default(cuid())
  roomMessageId String
  roomMessage   RoomMessage @relation(fields: [roomMessageId], references: [id], onDelete: Cascade)
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  emoji         String
  createdAt     DateTime    @default(now())

  @@unique([roomMessageId, userId])
}

model FileAttachment {
  id            String      @id @default(cuid())
  roomMessageId String
  roomMessage   RoomMessage @relation(fields: [roomMessageId], references: [id], onDelete: Cascade)
  fileUrl       String
  fileType      String
  createdAt     DateTime    @default(now())
}

model RoomMessageReply {
  id            String      @id @default(cuid())
  roomMessageId String
  roomMessage   RoomMessage @relation(fields: [roomMessageId], references: [id], onDelete: Cascade)
  senderId      String
  sender        User        @relation(fields: [senderId], references: [id], onDelete: Cascade)
  content       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, createdAt])
}
